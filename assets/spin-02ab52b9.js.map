{"version":3,"file":"spin-02ab52b9.js","sources":["../../../../packages/spin/src/styles.ts","../../../../packages/spin/src/spin.tsx"],"sourcesContent":["import { css, keyframes, SerializedStyles } from \"@emotion/react\"\nimport { getColor } from \"@zweb-design/theme\"\nimport { SpinColorScheme, SpinSize } from \"./interface\"\n\nexport function applyContainerStyle(block?: boolean): SerializedStyles {\n  return css`\n    display: ${block ? \"inline-flex\" : \"flex\"};\n    position: relative;\n  `\n}\n\nexport function applyTipsStyle(\n  colorScheme: SpinColorScheme,\n  size: SpinSize,\n): SerializedStyles {\n  return css`\n    size: ${size === \"small\" ? \"12px\" : \"14px\"};\n    margin-top: 8px;\n    line-height: 22px;\n    color: ${getColor(colorScheme, \"03\")};\n  `\n}\n\nexport function applySizeCss(\n  size: SpinSize,\n  loading: boolean,\n  colorScheme: SpinColorScheme,\n): SerializedStyles {\n  let sizeCss\n  switch (size) {\n    case \"small\":\n      sizeCss = css`\n        font-size: 12px;\n      `\n      break\n    case \"large\":\n      sizeCss = css`\n        font-size: 24px;\n      `\n      break\n    default:\n      sizeCss = css`\n        font-size: 16px;\n      `\n  }\n  const animationCss = loading ? rotateAnimation : null\n\n  return css`\n    color: ${getColor(colorScheme, \"03\")};\n    ${animationCss};\n    ${sizeCss};\n  `\n}\n\nexport function applySpinContainerCss(\n  loading: boolean,\n): SerializedStyles | undefined {\n  if (loading) {\n    let background\n    if (loading) {\n      background = css`\n        background-color: ${getColor(\"white\", \"03\")};\n      `\n    }\n    return css`\n      ${background};\n      flex-direction: column;\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      display: inline-flex;\n      justify-content: center;\n      align-items: center;\n      transition: opacity 0.1s linear;\n      width: 100%;\n      height: 100%;\n    `\n  }\n}\n\nexport const rotateKeyframe = keyframes`\n  0% {\n    transform: rotateZ(0deg);\n  }\n  100% {\n    transform: rotateZ(360deg)\n  }\n`\n\nexport const rotateAnimation = css`\n  animation: 1s linear infinite ${rotateKeyframe};\n`\n","import { cloneElement, forwardRef, ReactElement, useMemo } from \"react\"\nimport { SpinProps } from \"./interface\"\nimport { LoadingIcon } from \"@zweb-design/icon\"\nimport {\n  applyContainerStyle,\n  applySizeCss,\n  applySpinContainerCss,\n  applyTipsStyle,\n} from \"./styles\"\nimport { applyBoxStyle, deleteCssProps } from \"@zweb-design/theme\"\n\nexport const Spin = forwardRef<HTMLDivElement, SpinProps>((props, ref) => {\n  const {\n    loading = true,\n    size = \"medium\",\n    colorScheme = \"blue\",\n    block = true,\n    icon,\n    element,\n    tip,\n    children,\n    ...rest\n  } = props\n\n  const loadingIcon = useMemo(() => {\n    if (icon) {\n      return cloneElement(icon as ReactElement, {\n        style: applySizeCss(size, loading, colorScheme).styles,\n      })\n    } else if (element) {\n      return element\n    } else {\n      return <LoadingIcon css={applySizeCss(size, loading, colorScheme)} />\n    }\n  }, [colorScheme, element, icon, loading, size])\n\n  const tipView = useMemo(() => {\n    return tip && <span css={applyTipsStyle(colorScheme, size)}>{tip}</span>\n  }, [colorScheme, tip, size])\n\n  return (\n    <div\n      css={[applyContainerStyle(block), applyBoxStyle(props)]}\n      ref={ref}\n      {...deleteCssProps(rest)}\n    >\n      {children}\n      {loading && (\n        <div css={applySpinContainerCss(loading)}>\n          {loadingIcon}\n          {tipView}\n        </div>\n      )}\n    </div>\n  )\n})\n\nSpin.displayName = \"Spin\"\n"],"names":["applyContainerStyle","block","css","applyTipsStyle","colorScheme","size","getColor","applySizeCss","loading","sizeCss","animationCss","rotateAnimation","applySpinContainerCss","background","rotateKeyframe","keyframes","Spin","forwardRef","props","ref","icon","element","tip","children","rest","loadingIcon","useMemo","cloneElement","jsx","LoadingIcon","tipView","jsxs","applyBoxStyle","deleteCssProps"],"mappings":"yQAIO,SAASA,EAAoBC,EAAmC,CAC9D,OAAAC;AAAA,eACMD,EAAQ,cAAgB,MAAM;AAAA;AAAA,GAG7C,CAEgB,SAAAE,EACdC,EACAC,EACkB,CACX,OAAAH;AAAA,YACGG,IAAS,QAAU,OAAS,MAAM;AAAA;AAAA;AAAA,aAGjCC,EAASF,EAAa,IAAI,CAAC;AAAA,GAExC,CAEgB,SAAAG,EACdF,EACAG,EACAJ,EACkB,CACd,IAAAK,EACJ,OAAQJ,EAAM,CACZ,IAAK,QACOI,EAAAP;AAAA;AAAA,QAGV,MACF,IAAK,QACOO,EAAAP;AAAA;AAAA,QAGV,MACF,QACYO,EAAAP;AAAA;AAAA,OAGd,CACM,MAAAQ,EAAeF,EAAUG,EAAkB,KAE1C,OAAAT;AAAA,aACII,EAASF,EAAa,IAAI,CAAC;AAAA,MAClCM,CAAY;AAAA,MACZD,CAAO;AAAA,GAEb,CAEO,SAASG,EACdJ,EAC8B,CAC9B,GAAIA,EAAS,CACP,IAAAK,EACJ,OAAIL,IACWK,EAAAX;AAAA,4BACSI,EAAS,QAAS,IAAI,CAAC;AAAA,SAGxCJ;AAAA,QACHW,CAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAchB,CACF,CAEO,MAAMC,EAAiBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASjBJ,EAAkBT;AAAA,kCACGY,CAAc;AAAA,ECjFzCE,EAAAC,EAAA,WAAA,CAAAC,EAAAC,IAAA,CACL,KAAA,CAAM,QAAAX,EAAA,GACM,KAAAH,EAAA,SACH,YAAAD,EAAA,OACO,MAAAH,EAAA,GACN,KAAAmB,EACR,QAAAC,EACA,IAAAC,EACA,SAAAC,EACA,GAAAC,CACG,EAAAN,EAGLO,EAAAC,EAAAA,QAAA,IACEN,EACEO,EAAAA,aAAAP,EAAA,CAA0C,MAAAb,EAAAF,EAAAG,EAAAJ,CAAA,EAAA,MACQ,CAAA,EACjDiB,GAIDO,EAAAC,EAAA,CAAA,IAAAtB,EAAAF,EAAAG,EAAAJ,CAAA,CAAA,CAAA,EACF,CAAAA,EAAAiB,EAAAD,EAAAZ,EAAAH,CAAA,CAAA,EAGFyB,EAAAJ,EAAAA,QAAA,IACEJ,GAAAM,EAAA,OAAA,CAAA,IAAAzB,EAAAC,EAAAC,CAAA,EAAA,SAAAiB,CAAA,CAAA,EAAiE,CAAAlB,EAAAkB,EAAAjB,CAAA,CAAA,EAGnE,OAAA0B,EACE,MAAC,CAAA,IAAA,CAAA/B,EAAAC,CAAA,EAAA+B,EAAAd,CAAA,CAAA,EACuD,IAAAC,EACtD,GAAAc,EAAAT,CAAA,EACuB,SAAA,CAEtBD,EAAAf,GAAAuB,EAAA,MAAA,CAAA,IAAAnB,EAAAJ,CAAA,EAAA,SAAA,CAGIiB,EAAAK,CACA,EAAA,CACH,CAAA,CAAA,CAIR,CAAA,EAEAd,EAAA,YAAA"}