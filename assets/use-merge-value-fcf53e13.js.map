{"version":3,"file":"use-merge-value-fcf53e13.js","sources":["../../../../packages/system/src/use-merge-value.ts"],"sourcesContent":["// thx arco.design\nimport React, { useState, useEffect, useRef } from \"react\"\nimport { isUndefined } from \"./is\"\nimport { usePrevious } from \"./use-previous\"\n\nexport function useMergeValue<T>(\n  defaultStateValue: T,\n  props?: {\n    defaultValue?: T\n    value?: T\n  },\n): [T, React.Dispatch<React.SetStateAction<T>>, T] {\n  const { defaultValue, value } = props || {}\n  const firstRenderRef = useRef(true)\n  const prevPropsValue = usePrevious(props?.value)\n\n  const [stateValue, setStateValue] = useState<T>(\n    !isUndefined(value)\n      ? value\n      : !isUndefined(defaultValue)\n      ? defaultValue\n      : defaultStateValue,\n  )\n\n  useEffect(() => {\n    if (firstRenderRef.current) {\n      firstRenderRef.current = false\n      return\n    }\n    if (value === undefined && prevPropsValue !== value) {\n      setStateValue(value)\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value])\n\n  const mergedValue = isUndefined(value) ? stateValue : value\n\n  return [mergedValue, setStateValue, stateValue]\n}\n"],"names":["useMergeValue","defaultStateValue","props","defaultValue","value","firstRenderRef","useRef","prevPropsValue","usePrevious","stateValue","setStateValue","useState","isUndefined","useEffect"],"mappings":"4HAKgB,SAAAA,EACdC,EACAC,EAIiD,CACjD,KAAM,CAAE,aAAAC,EAAc,MAAAC,GAAUF,GAAS,CAAA,EACnCG,EAAiBC,SAAO,EAAI,EAC5BC,EAAiBC,EAAYN,GAAA,YAAAA,EAAO,KAAK,EAEzC,CAACO,EAAYC,CAAa,EAAIC,EAAA,SACjCC,EAAYR,CAAK,EAEbQ,EAAYT,CAAY,EAEzBF,EADAE,EAFAC,CAGA,EAGNS,OAAAA,EAAAA,UAAU,IAAM,CACd,GAAIR,EAAe,QAAS,CAC1BA,EAAe,QAAU,GACzB,MACF,CACID,IAAU,QAAaG,IAAmBH,GAC5CM,EAAcN,CAAK,CACrB,EAGC,CAACA,CAAK,CAAC,EAIH,CAFaQ,EAAYR,CAAK,EAAIK,EAAaL,EAEjCM,EAAeD,CAAU,CAChD"}