{"version":3,"file":"hook-36941598.js","sources":["../../../../packages/notification/src/notification-store.ts","../../../../packages/notification/src/hook.ts"],"sourcesContent":["import { v4 } from \"uuid\"\nimport { NotificationProps } from \"./interface\"\n\nexport interface NotificationGlobalProps {\n  maxCount?: number\n  duration?: number\n}\n\nexport interface NotificationHandler {\n  info: (Notification: NotificationProps) => string\n  error: (Notification: NotificationProps) => string\n  success: (Notification: NotificationProps) => string\n  warning: (Notification: NotificationProps) => string\n  normal: (Notification: NotificationProps) => string\n  show: (Notification: NotificationProps) => string\n  remove: (id: string) => void\n  config: (NotificationGlobalProps: NotificationGlobalProps) => void\n  clear: () => void\n}\n\nexport interface SubListener {\n  listenerId: string\n  onStoreChange: () => void\n}\n\nexport interface NotificationStoreHandler {\n  getNotification: () => NotificationProps[]\n  setNotification: (NotificationList: NotificationProps[]) => void\n  subscribe: (onStoreChange: () => void) => SubListener\n  unSubscribe: (listenerId: string) => void\n  updateConfig: (NotificationGlobalProps: NotificationGlobalProps) => void\n  getConfig: () => NotificationGlobalProps\n  add: (Notification: NotificationProps) => void\n  remove: (NotificationId: string) => void\n}\n\nexport interface NotificationStore {\n  maxCount: number\n  duration: number\n  listener: SubListener[]\n  NotificationList: NotificationProps[]\n}\n\nconst store = {\n  maxCount: 5,\n  duration: 3000,\n  listener: [],\n  NotificationList: [],\n} as NotificationStore\n\nfunction createNotificationStore(): NotificationStoreHandler {\n  return {\n    getNotification: () => {\n      return store.NotificationList\n    },\n    setNotification: (NotificationList: NotificationProps[]) => {\n      store.NotificationList = NotificationList\n      store.listener.forEach((listener) => {\n        listener.onStoreChange()\n      })\n    },\n    subscribe: (change) => {\n      const listener = {\n        listenerId: v4(),\n        onStoreChange: change,\n      } as SubListener\n      store.listener.push(listener)\n      listener.onStoreChange()\n      return listener\n    },\n    unSubscribe: (listenerId) => {\n      store.listener.splice(\n        store.listener.findIndex(\n          (listener) => listener.listenerId === listenerId,\n        ),\n        1,\n      )\n    },\n    add: (Notification) => {\n      store.NotificationList.push(Notification)\n      store.listener.forEach((listener) => {\n        listener.onStoreChange()\n      })\n    },\n    updateConfig: (NotificationGlobalProps) => {\n      if (NotificationGlobalProps.duration != undefined) {\n        store.duration = NotificationGlobalProps.duration\n      }\n      if (NotificationGlobalProps.maxCount != undefined) {\n        store.maxCount = NotificationGlobalProps.maxCount\n      }\n    },\n    getConfig: () => {\n      return {\n        maxCount: store.maxCount,\n        duration: store.duration,\n      }\n    },\n    remove: (NotificationId) => {\n      const index = store.NotificationList.findIndex(\n        (Notification) => Notification.id === NotificationId,\n      )\n      if (index != -1) {\n        store.NotificationList.splice(index, 1)\n        store.listener.forEach((listener) => {\n          listener.onStoreChange()\n        })\n      }\n    },\n  } as NotificationStoreHandler\n}\n\nexport const notificationStore = createNotificationStore()\n","import { v4 } from \"uuid\"\nimport {\n  NotificationGlobalProps,\n  NotificationHandler,\n  notificationStore,\n} from \"./notification-store\"\nimport { NotificationProps } from \"./interface\"\n\nconst showImpl = (notification: NotificationProps) => {\n  if (\n    notificationStore.getNotification().length >\n    (notificationStore.getConfig().maxCount ?? 5)\n  ) {\n    notificationStore.getNotification().shift()\n  }\n  if (!notification.id) {\n    notification.id = v4()\n  }\n  if (!notification.position) {\n    notification.position = \"topRight\"\n  }\n  if (!notification.type) {\n    notification.type = \"normal\"\n  }\n  notificationStore.add(notification)\n  return notification.id\n}\n\nconst handler = {\n  info: (notification: NotificationProps) => {\n    notification.type = \"info\"\n    return showImpl(notification)\n  },\n  error: (notification: NotificationProps) => {\n    notification.type = \"error\"\n    return showImpl(notification)\n  },\n  success: (notification: NotificationProps) => {\n    notification.type = \"success\"\n    return showImpl(notification)\n  },\n  warning: (notification: NotificationProps) => {\n    notification.type = \"warning\"\n    return showImpl(notification)\n  },\n  normal: (notification: NotificationProps) => {\n    notification.type = \"normal\"\n    return showImpl(notification)\n  },\n  show: showImpl,\n  remove: (id: string) => {\n    notificationStore.remove(id)\n  },\n  clear: () => {\n    notificationStore.setNotification([])\n  },\n  config: (notificationGlobalProps: NotificationGlobalProps) => {\n    notificationStore.updateConfig(notificationGlobalProps)\n  },\n} as NotificationHandler\n\nexport function useNotification(): NotificationHandler {\n  return handler\n}\n\nexport const createNotification = useNotification\n"],"names":["store","createNotificationStore","NotificationList","listener","change","v4","listenerId","Notification","NotificationGlobalProps","NotificationId","index","notificationStore","showImpl","notification","handler","id","notificationGlobalProps","useNotification"],"mappings":"qCA2CA,MAAMA,EAAQ,CACZ,SAAU,EACV,SAAU,IACV,SAAU,CAAC,EACX,iBAAkB,CAAC,CACrB,EAEA,SAASC,GAAoD,CACpD,MAAA,CACL,gBAAiB,IACRD,EAAM,iBAEf,gBAAkBE,GAA0C,CAC1DF,EAAM,iBAAmBE,EACnBF,EAAA,SAAS,QAASG,GAAa,CACnCA,EAAS,cAAc,CAAA,CACxB,CACH,EACA,UAAYC,GAAW,CACrB,MAAMD,EAAW,CACf,WAAYE,EAAG,EACf,cAAeD,CAAA,EAEX,OAAAJ,EAAA,SAAS,KAAKG,CAAQ,EAC5BA,EAAS,cAAc,EAChBA,CACT,EACA,YAAcG,GAAe,CAC3BN,EAAM,SAAS,OACbA,EAAM,SAAS,UACZG,GAAaA,EAAS,aAAeG,CACxC,EACA,CAAA,CAEJ,EACA,IAAMC,GAAiB,CACfP,EAAA,iBAAiB,KAAKO,CAAY,EAClCP,EAAA,SAAS,QAASG,GAAa,CACnCA,EAAS,cAAc,CAAA,CACxB,CACH,EACA,aAAeK,GAA4B,CACrCA,EAAwB,UAAY,OACtCR,EAAM,SAAWQ,EAAwB,UAEvCA,EAAwB,UAAY,OACtCR,EAAM,SAAWQ,EAAwB,SAE7C,EACA,UAAW,KACF,CACL,SAAUR,EAAM,SAChB,SAAUA,EAAM,QAAA,GAGpB,OAASS,GAAmB,CACpB,MAAAC,EAAQV,EAAM,iBAAiB,UAClCO,GAAiBA,EAAa,KAAOE,CAAA,EAEpCC,GAAS,KACLV,EAAA,iBAAiB,OAAOU,EAAO,CAAC,EAChCV,EAAA,SAAS,QAASG,GAAa,CACnCA,EAAS,cAAc,CAAA,CACxB,EAEL,CAAA,CAEJ,CAEO,MAAMQ,EAAoBV,EAAwB,ECxGnDW,EAAYC,IAEdF,EAAkB,kBAAkB,QACnCA,EAAkB,UAAU,EAAE,UAAY,IAEzBA,EAAA,kBAAkB,QAEjCE,EAAa,KAChBA,EAAa,GAAKR,KAEfQ,EAAa,WAChBA,EAAa,SAAW,YAErBA,EAAa,OAChBA,EAAa,KAAO,UAEtBF,EAAkB,IAAIE,CAAY,EAC3BA,EAAa,IAGhBC,EAAU,CACd,KAAOD,IACLA,EAAa,KAAO,OACbD,EAASC,CAAY,GAE9B,MAAQA,IACNA,EAAa,KAAO,QACbD,EAASC,CAAY,GAE9B,QAAUA,IACRA,EAAa,KAAO,UACbD,EAASC,CAAY,GAE9B,QAAUA,IACRA,EAAa,KAAO,UACbD,EAASC,CAAY,GAE9B,OAASA,IACPA,EAAa,KAAO,SACbD,EAASC,CAAY,GAE9B,KAAMD,EACN,OAASG,GAAe,CACtBJ,EAAkB,OAAOI,CAAE,CAC7B,EACA,MAAO,IAAM,CACOJ,EAAA,gBAAgB,CAAA,CAAE,CACtC,EACA,OAASK,GAAqD,CAC5DL,EAAkB,aAAaK,CAAuB,CACxD,CACF,EAEO,SAASC,GAAuC,CAC9C,OAAAH,CACT"}