{"version":3,"file":"input-tag-c8a3320c.js","sources":["../../../../packages/input-tag/src/style.ts","../../../../packages/input-tag/src/input-tag.tsx"],"sourcesContent":["import { css, SerializedStyles } from \"@emotion/react\"\nimport { InputTagColorScheme, InputTagSize } from \"./interface\"\nimport { getColor, getColorShadow, zIndex } from \"@illa-design/theme\"\n\nexport function applyInputTagInputStyle(\n  size: InputTagSize,\n  w: number,\n): SerializedStyles {\n  return css`\n    width: ${w}px;\n    font-size: inherit;\n    background: none;\n    outline: none;\n    border: none;\n    padding: 0;\n    font-family: unset;\n    line-height: 22px;\n\n    ::placeholder {\n      color: ${getColor(\"grayBlue\", \"04\")};\n    }\n  `\n}\n\nexport function applyInputTagPlaceHolderStyle(\n  size: InputTagSize,\n): SerializedStyles {\n  return css`\n    color: ${getColor(\"grayBlue\", \"04\")};\n    width: 100%;\n    white-space: nowrap;\n    overflow: hidden;\n    position: absolute;\n    text-overflow: ellipsis;\n    line-height: ${size === \"large\"\n      ? \"32px\"\n      : size === \"small\"\n      ? \"22px\"\n      : \"24px\"};\n  `\n}\n\nexport function applyAddBeforeAfterStyle(\n  size: InputTagSize,\n  disabled: boolean,\n  marginStyle: SerializedStyles,\n): SerializedStyles {\n  return css`\n    transition: 0.2s ease-in-out;\n    transition-property: border, background-color, box-shadow, background;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    flex-shrink: 0;\n    color: ${getColor(\"gray\", \"02\")};\n    background-color: ${disabled ? getColor(\"grayBlue\", \"09\") : \"unset\"};\n    border: 1px solid ${getColor(\"grayBlue\", \"08\")};\n    ${getPaddingStyle(size)};\n    ${marginStyle};\n  `\n}\n\nfunction getPaddingStyle(size: InputTagSize): SerializedStyles {\n  let pdStyle = css``\n  switch (size) {\n    case \"small\":\n      pdStyle = css`\n        padding: 0 12px;\n      `\n      break\n    case \"medium\":\n      pdStyle = css`\n        padding: 4px 16px;\n      `\n      break\n    case \"large\":\n      pdStyle = css`\n        padding: 8px 16px;\n      `\n      break\n  }\n  return pdStyle\n}\n\nexport function applyInputTagContainerStyle(\n  size: InputTagSize,\n  colorScheme: InputTagColorScheme,\n  error: boolean,\n  disabled: boolean,\n  hasBefore: boolean,\n  hasAfter: boolean,\n  borderList: string[],\n): SerializedStyles {\n  let otherStyle = css``\n  if (!disabled) {\n    otherStyle = css`\n      &:hover {\n        border-color: ${error\n          ? getColor(\"red\", \"02\")\n          : getColor(colorScheme, \"06\")};\n        z-index: ${zIndex.inputFocus};\n\n        .clear {\n          visibility: visible;\n        }\n      }\n\n      &:focus-within {\n        border-color: ${getColor(error ? \"red\" : colorScheme, \"03\")};\n        box-shadow: 0 0 8px 0\n          ${getColorShadow(error ? \"red\" : colorScheme, \"01\")};\n        z-index: ${zIndex.inputFocus};\n      }\n    `\n  }\n\n  return css`\n    transition: 0.2s ease-in-out;\n    transition-property: border, background-color, box-shadow, background;\n    display: flex;\n    align-items: center;\n    overflow: hidden;\n    box-sizing: border-box;\n    cursor: ${disabled ? \"not-allowed\" : \"text\"};\n    border-radius: ${!hasBefore ? borderList[0] : \"0\"}\n      ${!hasAfter ? borderList[1] : \"0\"} ${!hasAfter ? borderList[2] : \"0\"}\n      ${!hasBefore ? borderList[3] : \"0\"};\n    border: 1px solid\n      ${error ? getColor(\"red\", \"03\") : getColor(\"grayBlue\", \"08\")};\n    flex-grow: 1;\n    flex-shrink: 1;\n    background-color: ${disabled ? getColor(\"grayBlue\", \"09\") : \"unset\"};\n    ${getPaddingStyle(size)};\n    ${otherStyle};\n  `\n}\n\nexport const tagsListStyle = css`\n  display: flex;\n  flex-flow: row wrap;\n  flex-grow: 1;\n  position: relative;\n  flex-shrink: 1;\n  overflow: hidden;\n  align-items: center;\n  gap: 4px;\n`\n\nexport const tagStyle = css`\n  box-sizing: border-box;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nexport function applyPrefixSuffixStyle(\n  disabled: boolean,\n  marginStyle: SerializedStyles,\n): SerializedStyles {\n  return css`\n    align-self: center;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-shrink: 0;\n    color: ${disabled ? getColor(\"gray\", \"05\") : getColor(\"gray\", \"02\")};\n    min-height: 22px;\n    ${marginStyle};\n  `\n}\n\nexport const calcSpanStyle = css`\n  position: absolute;\n  visibility: hidden;\n`\n\nexport function applyInputContainerStyle(): SerializedStyles {\n  return css`\n    display: flex;\n    width: 100%;\n    flex-direction: row;\n    box-sizing: border-box;\n    font-size: 14px;\n  `\n}\n","import {\n  forwardRef,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\"\nimport { InputTagProps, TagObject } from \"./interface\"\nimport { useMergeValue } from \"@illa-design/system\"\nimport {\n  applyAddBeforeAfterStyle,\n  applyInputContainerStyle,\n  applyInputTagContainerStyle,\n  applyInputTagInputStyle,\n  applyInputTagPlaceHolderStyle,\n  applyPrefixSuffixStyle,\n  calcSpanStyle,\n  tagsListStyle,\n  tagStyle,\n} from \"./style\"\nimport { Tag } from \"@illa-design/tag\"\nimport { ClearIcon } from \"@illa-design/icon\"\nimport { applyBoxStyle, deleteCssProps, getColor } from \"@illa-design/theme\"\nimport useMeasure from \"react-use-measure\"\nimport { css } from \"@emotion/react\"\n\nexport const InputTag = forwardRef<HTMLDivElement, InputTagProps>(\n  (props, ref) => {\n    const {\n      colorScheme = \"blue\",\n      autoFocus,\n      allowClear,\n      disabled,\n      error,\n      readOnly,\n      saveOnBlur,\n      placeholder,\n      inputValue,\n      size = \"medium\",\n      prefix,\n      suffix,\n      defaultValue,\n      value,\n      onBlur,\n      onFocus,\n      onChange,\n      validate,\n      onClear,\n      onInputChange,\n      onKeyDown,\n      onPressEnter,\n      onRemove,\n      renderItem,\n      addBefore,\n      bdRadius,\n      inputTagRef,\n      addAfter,\n      labelInValue,\n      ...otherProps\n    } = props\n\n    let borderList = bdRadius?.split(\" \") ?? [\"8px\", \"8px\", \"8px\", \"8px\"]\n    if (borderList.length == 2) {\n      borderList = [borderList[0], borderList[1], borderList[0], borderList[1]]\n    } else if (borderList.length == 3) {\n      borderList = [borderList[0], borderList[1], borderList[2], borderList[1]]\n    }\n\n    const [focusInput, setFocusInput] = useState(false)\n\n    const [finalValue, setFinalValue] = useMergeValue<TagObject[] | string[]>(\n      [],\n      {\n        defaultValue: labelInValue\n          ? (defaultValue as TagObject[])\n          : (defaultValue as string[]),\n        value: labelInValue ? (value as TagObject[]) : (value as string[]),\n      },\n    )\n\n    const [finalInputValue, setFinalInputValue] = useMergeValue(\"\", {\n      defaultValue: \"\",\n      value: inputValue,\n    })\n\n    const [calcBlockRef, calcBlockBounds] = useMeasure()\n\n    const inputRef = useRef<HTMLInputElement>(null)\n    const inputStateRef = useRef<boolean>(false)\n\n    useImperativeHandle(\n      inputTagRef,\n      () => {\n        return {\n          focus: () => inputRef.current?.focus(),\n        }\n      },\n      [],\n    )\n\n    const tags = useMemo(() => {\n      return (\n        <>\n          {finalValue.map((v, i) => {\n            let closeable: boolean\n            if (labelInValue) {\n              if ((v as TagObject).closeable === undefined) {\n                closeable = !readOnly\n              } else {\n                closeable = (v as TagObject).closeable!!\n              }\n            } else {\n              closeable = !readOnly\n            }\n\n            if (disabled) {\n              closeable = false\n            }\n\n            return (\n              <Tag\n                css={tagStyle}\n                key={\n                  labelInValue\n                    ? (v as TagObject).label\n                    : `${i.toString()}:${value}`\n                }\n                visible={true}\n                size={size}\n                colorScheme=\"grayBlue\"\n                variant=\"light\"\n                closable={closeable}\n                onClose={(e) => {\n                  const newTagList = [...finalValue]\n                  newTagList.splice(i, 1)\n                  if (labelInValue) {\n                    if (value === undefined) {\n                      setFinalValue(newTagList as TagObject[])\n                    }\n                    onChange?.(newTagList as TagObject[])\n                  } else {\n                    if (value === undefined) {\n                      setFinalValue(newTagList as string[])\n                    }\n                    onChange?.(newTagList as string[])\n                  }\n                  onRemove?.(v, i, e)\n                }}\n              >\n                {renderItem?.(v) ??\n                  (labelInValue ? (v as TagObject).label : (v as string))}\n              </Tag>\n            )\n          })}\n        </>\n      )\n    }, [\n      finalValue,\n      labelInValue,\n      disabled,\n      value,\n      size,\n      renderItem,\n      readOnly,\n      onRemove,\n      onChange,\n      setFinalValue,\n    ])\n\n    const saveInputValue = () => {\n      if (finalInputValue !== \"\") {\n        let newList\n        if (labelInValue) {\n          newList = [\n            ...(finalValue as TagObject[]),\n            {\n              label: finalValue.length.toString(),\n              value: finalInputValue,\n              closeable: true,\n            },\n          ]\n        } else {\n          newList = [...(finalValue as string[]), finalInputValue]\n        }\n        if (value === undefined) {\n          setFinalValue(newList)\n        }\n        if (inputValue === undefined) {\n          setFinalInputValue(\"\")\n        }\n        onChange?.(newList)\n      }\n    }\n\n    return (\n      <div\n        css={[applyInputContainerStyle(), applyBoxStyle(otherProps)]}\n        ref={ref}\n        {...deleteCssProps(otherProps)}\n      >\n        {addBefore && (\n          <span\n            css={applyAddBeforeAfterStyle(\n              size,\n              disabled ?? false,\n              css`\n                margin-right: -1px;\n                border-radius: ${borderList[0]} 0 0 ${borderList[3]};\n              `,\n            )}\n          >\n            {addBefore}\n          </span>\n        )}\n        <div\n          css={[\n            applyInputTagContainerStyle(\n              size,\n              colorScheme,\n              error ?? false,\n              disabled ?? false,\n              addBefore !== undefined,\n              addAfter !== undefined,\n              borderList,\n            ),\n          ]}\n          onClick={() => {\n            inputRef.current?.focus()\n          }}\n        >\n          {prefix && (\n            <span\n              css={applyPrefixSuffixStyle(\n                disabled ?? false,\n                css`\n                  margin-right: ${size === \"small\" ? \"8px\" : \"12px\"};\n                `,\n              )}\n            >\n              {prefix}\n            </span>\n          )}\n          <div css={tagsListStyle}>\n            {finalValue.length > 0 || focusInput ? (\n              tags\n            ) : (\n              <div css={applyInputTagPlaceHolderStyle(size)}>{placeholder}</div>\n            )}\n            <input\n              disabled={disabled}\n              key=\"inputTagInput\"\n              ref={inputRef}\n              autoFocus={autoFocus}\n              readOnly={readOnly}\n              css={applyInputTagInputStyle(size, calcBlockBounds.width + 12)}\n              onChange={(e) => {\n                if (inputValue === undefined) {\n                  setFinalInputValue(e.currentTarget.value)\n                }\n                onInputChange?.(e.currentTarget.value)\n              }}\n              onBlur={async (e) => {\n                if (saveOnBlur) {\n                  const checked = await validate?.(finalInputValue, finalValue)\n                  if (checked || validate === undefined) {\n                    saveInputValue()\n                  }\n                }\n                onBlur?.(e)\n                setFocusInput(false)\n              }}\n              onFocus={(e) => {\n                onFocus?.(e)\n                setFocusInput(true)\n              }}\n              value={finalInputValue}\n              onCompositionStart={() => {\n                inputStateRef.current = true\n              }}\n              onCompositionEnd={() => {\n                inputStateRef.current = false\n              }}\n              onKeyDown={async (e) => {\n                if (inputStateRef.current) {\n                  return\n                }\n                onKeyDown?.(e)\n                if (e.key === \"Enter\") {\n                  inputRef.current?.focus()\n                  onPressEnter?.(e)\n                  const checked = await validate?.(finalInputValue, finalValue)\n                  if (checked || validate === undefined) {\n                    saveInputValue()\n                  }\n                }\n                if (e.key === \"Backspace\" && finalInputValue === \"\") {\n                  inputRef.current?.focus()\n                  let newTagList\n                  if (labelInValue) {\n                    newTagList = [...(finalValue as TagObject[])]\n                  } else {\n                    newTagList = [...(finalValue as string[])]\n                  }\n                  const removedTag = newTagList.pop()\n                  if (value === undefined) {\n                    setFinalValue(newTagList)\n                  }\n                  if (removedTag) {\n                    onRemove?.(removedTag, newTagList.length, e)\n                  }\n                  onChange?.(newTagList)\n                }\n              }}\n            />\n          </div>\n          {allowClear && !disabled && finalValue.length > 0 && (\n            <ClearIcon\n              className=\"clear\"\n              flexShrink=\"0\"\n              onClick={(e) => {\n                e.stopPropagation()\n                onClear?.()\n                if (value === undefined) {\n                  setFinalValue([])\n                }\n                onChange?.([])\n              }}\n              cursor=\"pointer\"\n              fs=\"12px\"\n              ml=\"4px\"\n              c={getColor(\"grayBlue\", \"06\")}\n            />\n          )}\n          {suffix && (\n            <span\n              css={applyPrefixSuffixStyle(\n                disabled ?? false,\n                css`\n                  margin-left: ${size === \"small\" ? \"8px\" : \"12px\"};\n                `,\n              )}\n            >\n              {suffix}\n            </span>\n          )}\n          <span ref={calcBlockRef} css={calcSpanStyle}>\n            {finalInputValue.replace(/\\s/g, \"\\u00A0\")}\n          </span>\n        </div>\n        {addAfter && (\n          <span\n            css={applyAddBeforeAfterStyle(\n              size,\n              disabled ?? false,\n              css`\n                margin-left: -1px;\n                border-radius: 0 ${borderList[1]} ${borderList[2]} 0;\n              `,\n            )}\n          >\n            {addAfter}\n          </span>\n        )}\n      </div>\n    )\n  },\n)\n\nInputTag.displayName = \"InputTag\"\n"],"names":["applyInputTagInputStyle","size","w","css","getColor","applyInputTagPlaceHolderStyle","applyAddBeforeAfterStyle","disabled","marginStyle","getPaddingStyle","pdStyle","applyInputTagContainerStyle","colorScheme","error","hasBefore","hasAfter","borderList","otherStyle","zIndex","getColorShadow","tagsListStyle","tagStyle","applyPrefixSuffixStyle","calcSpanStyle","applyInputContainerStyle","InputTag","forwardRef","props","ref","autoFocus","allowClear","readOnly","saveOnBlur","placeholder","inputValue","prefix","suffix","defaultValue","value","onBlur","onFocus","onChange","validate","onClear","onInputChange","onKeyDown","onPressEnter","onRemove","renderItem","addBefore","bdRadius","inputTagRef","addAfter","labelInValue","otherProps","focusInput","setFocusInput","useState","finalValue","setFinalValue","useMergeValue","finalInputValue","setFinalInputValue","calcBlockRef","calcBlockBounds","useMeasure","inputRef","useRef","inputStateRef","useImperativeHandle","_a","tags","useMemo","jsx","Fragment","v","i","closeable","Tag","e","newTagList","saveInputValue","newList","jsxs","applyBoxStyle","deleteCssProps","_b","removedTag","ClearIcon"],"mappings":"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"}